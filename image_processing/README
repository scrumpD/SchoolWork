==============================================
 ____  _           _            _
|  _ \| |__   ___ | |_ ___  ___| | ___  _ __
| |_) | '_ \ / _ \| __/ _ \/ __| |/ _ \| '_ \
|  __/| | | | (_) | || (_) \__ \ | (_) | |_) |
|_|   |_| |_|\___/ \__\___/|___/_|\___/| .__/
                                       |_|

==============================================

Introduction: This is an open-ended assignment in which you and your
partner(s) will be able to exercise both your programming skills and artistic
side. It's genuinely one of the most fun assignments I give each semester, and
will get you practice at working with multidimensional vectors.

Goal: You will write a Photoshop-style filter. Your code will take in an
image, and write out a modified image that will look super cool.

I have given you operational code that will apply two image filters to an
image. You should compile it (using "make" instead of "compile") and run it
("a.out /public/kyoto.jpg") to get a feel for how it works: 
1) It will output how long it takes to load the image, to filter the image,
write the image to disk, etc.
2) You will then have two files in your directory here called filter1.jpg and
filter2.jpg. Filter1.jpg is the result after the first image filter has been
applied, and filter2.jpg takes the result from filter1 and applies filter2 to
it, and then writes the results to disk as well.

You will need to find a cool image to start with as well as writing cool code
with your partner.

Q: HOW DO I VIEW THE IMAGES? I'M USING A TEXT-BASED INTERFACE!?

Option 1) Use a SCP client to log in on the server (I use WinSCP on Windows,
Mac users can search for "Mac SCP client") and transfer the files to and from
the server. You can upload your image to the server this way, as well as
downloading the output of the program (filter1.jpg and filter2.jpg).

Option 2) I have written an image viewer called "Aseity" that can run inside of PuTTY (if you
use Mac, you can't use Terminal for this, you have to use Iterm2 instead). It
will display the image at whatever font size you're using, so you can keep up
a second PuTTY window with a smaller font size for image viewing (or size 1
font if you want pixel perfect resolution). You can view your image from
within PuTTY like this:
"aseity ./filter1.jpg"

Q: How do I read and write image data? I'm super confused.

A: Good luck! I know the answer! The image data will be passed to your
function (each partner will get their own file, either filter1.cc or
filter2.cc) as a "3D vector". The vector will have Y rows, X columns, and
three colors at each point in the image: red, green, and blue. The values for
red, green, and blue must range between 0 and 255. 0 means no color, 255 means
maximum color.

So if I wanted to make the pixel at row 50, column 35 purple, I could write
these lines of code:
vec.at(50).at(35).at(RED)   = 255; //Full red
vec.at(50).at(35).at(GREEN) = 0;   //No Green
vec.at(50).at(35).at(BLUE)  = 255; //Full BLUE

When the vector gets written to disk as a jpeg (I've done that code for you!
Sweet!) then you will see a single purple pixel at row 50, column 35.

Typically we don't write one pixel at a time, but use loops and stuff, but
that's how you go about reading and writing pixels in an image. If you don't
want to do bounds checking, you could even do something like this:
vec[50][35][RED]   *= 2; //Double the amount of red at row 50, col 35
vec[50][35][GREEN] *= 2; //Double the amount of green
vec[50][35][BLUE]  *= 2; //Double the amount of blue

This would take whatever was at that pixel before, and double it, up to a
maximum of 255 (my code caps your values at 255 if you go over). It's possible
if you exceed 2 billion you'll overflow, so don't overflow. The only numbers
you need are from 0 to 255.

Your tasks:

1) First, you must think of some other sort of image filter you might want to
write, and then write it. Delete all the code between the comments saying DEMO
CODE START and DEMO CODE END (unless there's a bit of it you want to use I
guess). Then write your own code following the pattern you can see in the demo
code I've given you.

The cooler the filter, the more points you will get, with up to a letter grade
of extra credit for something super awesome. If something is low effort, then
you'll get like a C or something, so even if you don't put out much effort,
make it look like you put out a lot of effort.

2) Second, your partner will do the same for the other filter (one of you
should write filter1, found in filter1.cc, the other should write filter2,
found in - you guessed it - filter2.cc). You don't need to modify main.cc
other than putting your names on the top of the file. 

If your partner flakes, then you're on the hook for doing both filters.

If there's *three* partners, which happens some times, then edit main.cc - at
the very bottom there's some commented out code that will call filter3 and
write filter3.jpg to disk. Partner 3 should edit the function filter3 found in
filter3.cc.

3) Third, you must draw your logo somewhere on the screen as a watermark to
show who made the image. This can be as simple as doing a small red triangle in
the bottom left corner, or as complicated as a signature. It should overwrite
whatever image data was there before, and be visible to the naked eye.
Extra Credit: More complicated logos can be awarded bonus points

How can you do this? I'd write a function or something to draw a line, and
then call that function repeatedly. If you wanted to write a black pixel at
row Y and col X, you could do this:
vec[Y][X][RED]   = 0;
vec[Y][X][GREEN] = 0;
vec[Y][X][BLUE]  = 0;

0,0,0 is perfect black, so the pixel at Y down, X across will be black now.
Put that into a loop, and you can draw a black line! Neat!

4) Finally, you must hide a secret message somewhere in the image, with a
hashtag prepending it. The message itself is your choice, but it doesn't need to
be longer than a word or two. You can hide it however you want, but the message
must be recoverable by a third party somehow.

Grading:
You will earn one letter grade for each bullet point above, up to a maximum of a B (80%)
before the extra credit is applied.

In order to get an A or above, your project must be artistically impressive. We will bring
in a panel of guest judges to give you an "artistic score" to go with your "technical
score", like in ice skating. I recommend you think carefully about what image you choose
to apply your filters to, and to the overall aesthetic of your image afterward. It is possible
to create amazing art with relatively few lines of code, but most successful projects put
a lot of time into experimenting with their code to get exactly the right effect they want.

Note: If your color data overflows, it will likely get a zero for the artistic score, so make sure
you write code that will prevent your RGB values from exceeding 255 or falling
below 0. My code does go to some effort to clamp the values at 0 to 255 (if
you go below 0, it sets the value to 0, if you go above 255, it sets the value
to 255), but overflow is still easily possible. Also remember that these
values are ints, so if you do a lot of division, it's easy to get a 0 - 128 /
200 is 0 in integer world, right?
